// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_ZF.Data;

#nullable disable

namespace Project_ZF.Migrations
{
    [DbContext(typeof(ZiekenFondsContext))]
    partial class ZiekenFondsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project_ZF.Models.Activiteit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activiteit", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beschrijving = "Een verfrissende duik nemen in het zwembad.",
                            Naam = "Zwemmen"
                        },
                        new
                        {
                            Id = 2,
                            Beschrijving = "Creatief aan de slag met verf en canvas.",
                            Naam = "Schilderen"
                        },
                        new
                        {
                            Id = 3,
                            Beschrijving = "Een ontspannen wandeling door de natuur.",
                            Naam = "Wandelen"
                        },
                        new
                        {
                            Id = 4,
                            Beschrijving = "Ontdek de omgeving met de fiets.",
                            Naam = "Fietsen"
                        },
                        new
                        {
                            Id = 5,
                            Beschrijving = "Leer nieuwe gerechten bereiden in de keuken.",
                            Naam = "Koken"
                        },
                        new
                        {
                            Id = 6,
                            Beschrijving = "Kom tot rust en verbeter je flexibiliteit.",
                            Naam = "Yoga"
                        },
                        new
                        {
                            Id = 7,
                            Beschrijving = "Oefen je precisie met pijl en boog.",
                            Naam = "Boogschieten"
                        },
                        new
                        {
                            Id = 8,
                            Beschrijving = "Geniet van een nacht in de buitenlucht.",
                            Naam = "Kamperen"
                        },
                        new
                        {
                            Id = 9,
                            Beschrijving = "Beweeg op de ritmes van de muziek.",
                            Naam = "Dansen"
                        },
                        new
                        {
                            Id = 10,
                            Beschrijving = "Leg prachtige momenten vast met je camera.",
                            Naam = "Fotografie"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Beloning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Beloning", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beschrijving = "Niet accumuleerbaar met andere kortingen",
                            LevelId = 1,
                            Naam = "Spaar nog verder"
                        },
                        new
                        {
                            Id = 2,
                            Beschrijving = "Niet accumuleerbaar met andere kortingen",
                            LevelId = 2,
                            Naam = "100 euro korting"
                        },
                        new
                        {
                            Id = 3,
                            Beschrijving = "Niet accumuleerbaar met andere kortingen",
                            LevelId = 3,
                            Naam = "200 euro korting"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Bestemming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BestemmingsNaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxLeeftijd")
                        .HasColumnType("int");

                    b.Property<int>("MinLeeftijd")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("Bestemming", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beschrijving = "Een mooie stad met grachten en musea.",
                            BestemmingsNaam = "Amsterdam",
                            Code = "AMS",
                            MaxLeeftijd = 25,
                            MinLeeftijd = 16
                        },
                        new
                        {
                            Id = 2,
                            Beschrijving = "De eeuwige stad met een rijke geschiedenis.",
                            BestemmingsNaam = "Rome",
                            Code = "ROM",
                            MaxLeeftijd = 28,
                            MinLeeftijd = 18
                        },
                        new
                        {
                            Id = 3,
                            Beschrijving = "De stad van de liefde en prachtige architectuur.",
                            BestemmingsNaam = "Parijs",
                            Code = "PAR",
                            MaxLeeftijd = 22,
                            MinLeeftijd = 14
                        },
                        new
                        {
                            Id = 4,
                            Beschrijving = "Een stad met een boeiende geschiedenis en cultuur.",
                            BestemmingsNaam = "Berlijn",
                            Code = "BER",
                            MaxLeeftijd = 24,
                            MinLeeftijd = 15
                        },
                        new
                        {
                            Id = 5,
                            Beschrijving = "Een kosmopolitische stad met iconische bezienswaardigheden.",
                            BestemmingsNaam = "Londen",
                            Code = "LON",
                            MaxLeeftijd = 27,
                            MinLeeftijd = 17
                        },
                        new
                        {
                            Id = 6,
                            Beschrijving = "De stad die nooit slaapt.",
                            BestemmingsNaam = "New York",
                            Code = "NYC",
                            MaxLeeftijd = 28,
                            MinLeeftijd = 20
                        },
                        new
                        {
                            Id = 7,
                            Beschrijving = "Een bruisende metropool met een mix van traditionele en moderne cultuur.",
                            BestemmingsNaam = "Tokio",
                            Code = "TOK",
                            MaxLeeftijd = 21,
                            MinLeeftijd = 12
                        },
                        new
                        {
                            Id = 8,
                            Beschrijving = "Bekend om zijn iconische Opera House en prachtige stranden.",
                            BestemmingsNaam = "Sydney",
                            Code = "SYD",
                            MaxLeeftijd = 26,
                            MinLeeftijd = 19
                        },
                        new
                        {
                            Id = 9,
                            Beschrijving = "De thuisbasis van de piramides en de Egyptische cultuur.",
                            BestemmingsNaam = "Caïro",
                            Code = "CAI",
                            MaxLeeftijd = 23,
                            MinLeeftijd = 13
                        },
                        new
                        {
                            Id = 10,
                            Beschrijving = "Een stad met prachtige landschappen en diverse fauna.",
                            BestemmingsNaam = "Kaapstad",
                            Code = "CAP",
                            MaxLeeftijd = 28,
                            MinLeeftijd = 18
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AantalPunten")
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GeboorteDatum")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Gemeente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Huisdokter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Huisnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActief")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHoofdMonitor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLId")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RekeningNummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelefoonNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de0920b6-3ab1-41f4-afdc-da3ca39f0316",
                            Email = "jan.jansen@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Amsterdam",
                            Huisdokter = "Dr. Smith",
                            Huisnummer = "12A",
                            IsActief = true,
                            IsHoofdMonitor = false,
                            IsLId = true,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Jansen",
                            NormalizedEmail = "JAN.JANSEN@EXAMPLE.COM",
                            NormalizedUserName = "JAN.JANSEN",
                            PhoneNumber = "0612345678",
                            PhoneNumberConfirmed = true,
                            Postcode = "1234AB",
                            RekeningNummer = "NL91ABNA0417164300",
                            SecurityStamp = "7b39b515-3664-4e2c-9211-d4a6c3dd63e0",
                            Straat = "Kerkstraat",
                            TelefoonNummer = "0612345678",
                            TwoFactorEnabled = false,
                            UserName = "jan.jansen",
                            Voornaam = "Jan"
                        },
                        new
                        {
                            Id = "2",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73f02e97-dbcd-4bdd-8458-1efa1c9e1908",
                            Email = "sophie.devries@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1985, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Rotterdam",
                            Huisdokter = "Dr. Brown",
                            Huisnummer = "34B",
                            IsActief = true,
                            IsHoofdMonitor = true,
                            IsLId = false,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "De Vries",
                            NormalizedEmail = "SOPHIE.DEVRIES@EXAMPLE.COM",
                            NormalizedUserName = "SOPHIE.DEVRIES",
                            PhoneNumber = "0612345679",
                            PhoneNumberConfirmed = true,
                            Postcode = "4321CD",
                            RekeningNummer = "NL91ABNA0417164301",
                            SecurityStamp = "23fbc1da-e75e-40ff-bbb5-06ca2501f8aa",
                            Straat = "Bakerstraat",
                            TelefoonNummer = "0612345679",
                            TwoFactorEnabled = false,
                            UserName = "sophie.devries",
                            Voornaam = "Sophie"
                        },
                        new
                        {
                            Id = "3",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4144ee0c-9390-4a6f-8f99-711421433179",
                            Email = "kees.peters@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1992, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Utrecht",
                            Huisdokter = "Dr. Johnson",
                            Huisnummer = "5",
                            IsActief = true,
                            IsHoofdMonitor = false,
                            IsLId = true,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Peters",
                            NormalizedEmail = "KEES.PETERS@EXAMPLE.COM",
                            NormalizedUserName = "KEES.PETERS",
                            PhoneNumber = "0612345680",
                            PhoneNumberConfirmed = true,
                            Postcode = "5678CD",
                            RekeningNummer = "NL91ABNA0417164302",
                            SecurityStamp = "fb60fe51-60a1-40fe-a8c5-436305e2659b",
                            Straat = "Dorpstraat",
                            TelefoonNummer = "0612345680",
                            TwoFactorEnabled = false,
                            UserName = "kees.peters",
                            Voornaam = "Kees"
                        },
                        new
                        {
                            Id = "4",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "709cef3c-8419-4d4f-a7a9-e77b14c939bb",
                            Email = "els.bakker@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1980, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Den Haag",
                            Huisdokter = "Dr. White",
                            Huisnummer = "9",
                            IsActief = true,
                            IsHoofdMonitor = true,
                            IsLId = false,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Bakker",
                            NormalizedEmail = "ELS.BAKKER@EXAMPLE.COM",
                            NormalizedUserName = "ELS.BAKKER",
                            PhoneNumber = "0612345681",
                            PhoneNumberConfirmed = true,
                            Postcode = "1234XY",
                            RekeningNummer = "NL91ABNA0417164303",
                            SecurityStamp = "09ce4cb4-4d0f-4efd-83c5-0a3d352e2f1c",
                            Straat = "Hoofdstraat",
                            TelefoonNummer = "0612345681",
                            TwoFactorEnabled = false,
                            UserName = "els.bakker",
                            Voornaam = "Els"
                        },
                        new
                        {
                            Id = "5",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19bc52cc-c5c8-47e2-9e2c-5107633e83fb",
                            Email = "tom.klein@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1995, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Eindhoven",
                            Huisdokter = "Dr. Green",
                            Huisnummer = "44",
                            IsActief = true,
                            IsHoofdMonitor = false,
                            IsLId = true,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Klein",
                            NormalizedEmail = "TOM.KLEIN@EXAMPLE.COM",
                            NormalizedUserName = "TOM.KLEIN",
                            PhoneNumber = "0612345682",
                            PhoneNumberConfirmed = true,
                            Postcode = "1234EF",
                            RekeningNummer = "NL91ABNA0417164304",
                            SecurityStamp = "5eea8bf2-2d71-4cd0-8a63-bb67baa26e56",
                            Straat = "Schoolstraat",
                            TelefoonNummer = "0612345682",
                            TwoFactorEnabled = false,
                            UserName = "tom.klein",
                            Voornaam = "Tom"
                        },
                        new
                        {
                            Id = "6",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0709d76-5fcb-47d2-9b47-87f810136a8a",
                            Email = "lisa.vermeer@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1998, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Groningen",
                            Huisdokter = "Dr. Black",
                            Huisnummer = "1",
                            IsActief = true,
                            IsHoofdMonitor = true,
                            IsLId = false,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Vermeer",
                            NormalizedEmail = "LISA.VERMEER@EXAMPLE.COM",
                            NormalizedUserName = "LISA.VERMEER",
                            PhoneNumber = "0612345683",
                            PhoneNumberConfirmed = true,
                            Postcode = "8765AB",
                            RekeningNummer = "NL91ABNA0417164305",
                            SecurityStamp = "1f9fad65-fb6d-424b-ad7b-69821eb0f7b9",
                            Straat = "Zeeweg",
                            TelefoonNummer = "0612345683",
                            TwoFactorEnabled = false,
                            UserName = "lisa.vermeer",
                            Voornaam = "Lisa"
                        },
                        new
                        {
                            Id = "7",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbbf7083-593f-46ab-b57d-30fc6f134dd5",
                            Email = "peter.oosterman@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1991, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Tilburg",
                            Huisdokter = "Dr. Blue",
                            Huisnummer = "20",
                            IsActief = true,
                            IsHoofdMonitor = false,
                            IsLId = true,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Oosterman",
                            NormalizedEmail = "PETER.OOSTERMAN@EXAMPLE.COM",
                            NormalizedUserName = "PETER.OOSTERMAN",
                            PhoneNumber = "0612345684",
                            PhoneNumberConfirmed = true,
                            Postcode = "5012CD",
                            RekeningNummer = "NL91ABNA0417164306",
                            SecurityStamp = "49dd02e7-99d6-4940-8405-97e0b2e89956",
                            Straat = "Parklaan",
                            TelefoonNummer = "0612345684",
                            TwoFactorEnabled = false,
                            UserName = "peter.oosterman",
                            Voornaam = "Peter"
                        },
                        new
                        {
                            Id = "8",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4b7d93f-d632-4bf9-a73b-e3504a74f902",
                            Email = "anouk.brouwer@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1993, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Nijmegen",
                            Huisdokter = "Dr. Grey",
                            Huisnummer = "15",
                            IsActief = true,
                            IsHoofdMonitor = true,
                            IsLId = false,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Brouwer",
                            NormalizedEmail = "ANOUK.BROUWER@EXAMPLE.COM",
                            NormalizedUserName = "ANOUK.BROUWER",
                            PhoneNumber = "0612345685",
                            PhoneNumberConfirmed = true,
                            Postcode = "6543AB",
                            RekeningNummer = "NL91ABNA0417164307",
                            SecurityStamp = "b5facead-5907-4a3b-ac81-fef45b9db373",
                            Straat = "Vijverweg",
                            TelefoonNummer = "0612345685",
                            TwoFactorEnabled = false,
                            UserName = "anouk.brouwer",
                            Voornaam = "Anouk"
                        },
                        new
                        {
                            Id = "9",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2e8059c-22d2-4fb7-b835-8e9bc5b665b1",
                            Email = "david.kramer@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1988, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Haarlem",
                            Huisdokter = "Dr. Red",
                            Huisnummer = "30",
                            IsActief = true,
                            IsHoofdMonitor = false,
                            IsLId = true,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Kramer",
                            NormalizedEmail = "DAVID.KRAMER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.KRAMER",
                            PhoneNumber = "0612345686",
                            PhoneNumberConfirmed = true,
                            Postcode = "2030AB",
                            RekeningNummer = "NL91ABNA0417164308",
                            SecurityStamp = "1ef02e7d-fb81-46bf-b79a-bc10fc4c29f4",
                            Straat = "Laan van de Vrijheid",
                            TelefoonNummer = "0612345686",
                            TwoFactorEnabled = false,
                            UserName = "david.kramer",
                            Voornaam = "David"
                        },
                        new
                        {
                            Id = "10",
                            AantalPunten = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6205eba9-d63b-434f-800e-ee4942887bf5",
                            Email = "joris.smit@example.com",
                            EmailConfirmed = true,
                            GeboorteDatum = new DateTime(1989, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gemeente = "Breda",
                            Huisdokter = "Dr. Orange",
                            Huisnummer = "11",
                            IsActief = true,
                            IsHoofdMonitor = true,
                            IsLId = false,
                            LevelId = 1,
                            LockoutEnabled = false,
                            Naam = "Smit",
                            NormalizedEmail = "JORIS.SMIT@EXAMPLE.COM",
                            NormalizedUserName = "JORIS.SMIT",
                            PhoneNumber = "0612345687",
                            PhoneNumberConfirmed = true,
                            Postcode = "1234GH",
                            RekeningNummer = "NL91ABNA0417164309",
                            SecurityStamp = "8a323c06-71fe-485f-994c-172c620066da",
                            Straat = "Weg naar de Vrijheid",
                            TelefoonNummer = "0612345687",
                            TwoFactorEnabled = false,
                            UserName = "joris.smit",
                            Voornaam = "Joris"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Deelnemer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroepreisDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<string>("Opmerkingen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroepreisDetailsId");

                    b.HasIndex("KindId");

                    b.ToTable("Deelnemer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroepreisDetailsId = 1,
                            KindId = 1,
                            Opmerkingen = "Eerste deelnemer, enthousiast!",
                            Review = "Geweldige ervaring!",
                            ReviewScore = 5
                        },
                        new
                        {
                            Id = 2,
                            GroepreisDetailsId = 2,
                            KindId = 2,
                            Opmerkingen = "Zeer leergierig.",
                            Review = "Zeer leerzaam.",
                            ReviewScore = 4
                        },
                        new
                        {
                            Id = 3,
                            GroepreisDetailsId = 3,
                            KindId = 3,
                            Opmerkingen = "Had veel plezier.",
                            Review = "Wat een avontuur!",
                            ReviewScore = 5
                        },
                        new
                        {
                            Id = 4,
                            GroepreisDetailsId = 4,
                            KindId = 4,
                            Opmerkingen = "Zou het zeker opnieuw doen.",
                            Review = "Fantastisch!",
                            ReviewScore = 5
                        },
                        new
                        {
                            Id = 5,
                            GroepreisDetailsId = 5,
                            KindId = 5,
                            Opmerkingen = "Een geweldige ervaring.",
                            Review = "Leuke activiteit.",
                            ReviewScore = 3
                        },
                        new
                        {
                            Id = 6,
                            GroepreisDetailsId = 6,
                            KindId = 6,
                            Opmerkingen = "Ik heb er veel van geleerd.",
                            Review = "Zeer leerzaam.",
                            ReviewScore = 4
                        },
                        new
                        {
                            Id = 7,
                            GroepreisDetailsId = 7,
                            KindId = 7,
                            Opmerkingen = "Mooi programma.",
                            Review = "Wat een ervaring!",
                            ReviewScore = 5
                        },
                        new
                        {
                            Id = 8,
                            GroepreisDetailsId = 8,
                            KindId = 8,
                            Opmerkingen = "Zeer goed georganiseerd.",
                            Review = "Alles was perfect geregeld.",
                            ReviewScore = 4
                        },
                        new
                        {
                            Id = 9,
                            GroepreisDetailsId = 9,
                            KindId = 9,
                            Opmerkingen = "Prachtige ervaring.",
                            Review = "Een onvergetelijke reis!",
                            ReviewScore = 5
                        },
                        new
                        {
                            Id = 10,
                            GroepreisDetailsId = 10,
                            KindId = 10,
                            Opmerkingen = "Echt een aanrader.",
                            Review = "Zeker de moeite waard!",
                            ReviewScore = 4
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Foto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BestemmingId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BestemmingId");

                    b.ToTable("Foto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BestemmingId = 1,
                            Naam = "AmsterdamGrachten.jpg"
                        },
                        new
                        {
                            Id = 2,
                            BestemmingId = 2,
                            Naam = "RomeColosseum.jpg"
                        },
                        new
                        {
                            Id = 3,
                            BestemmingId = 3,
                            Naam = "ParijsEiffeltoren.jpg"
                        },
                        new
                        {
                            Id = 4,
                            BestemmingId = 4,
                            Naam = "BerlijnBrandenburgerTor.jpg"
                        },
                        new
                        {
                            Id = 5,
                            BestemmingId = 5,
                            Naam = "LondenBigBen.jpg"
                        },
                        new
                        {
                            Id = 6,
                            BestemmingId = 6,
                            Naam = "NewYorkSkyline.jpg"
                        },
                        new
                        {
                            Id = 7,
                            BestemmingId = 7,
                            Naam = "TokioShibuya.jpg"
                        },
                        new
                        {
                            Id = 8,
                            BestemmingId = 8,
                            Naam = "SydneyOperaHouse.jpg"
                        },
                        new
                        {
                            Id = 9,
                            BestemmingId = 9,
                            Naam = "CairoPyramids.jpg"
                        },
                        new
                        {
                            Id = 10,
                            BestemmingId = 10,
                            Naam = "KaapstadTafelberg.jpg"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Groepsreis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EindDatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroepsreisId")
                        .HasColumnType("int");

                    b.Property<double>("Prijs")
                        .HasColumnType("float");

                    b.Property<int>("StandaardPunten")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroepsreisId");

                    b.ToTable("Groepsreis", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeginDatum = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 1,
                            Prijs = 1200.0,
                            StandaardPunten = 200
                        },
                        new
                        {
                            Id = 2,
                            BeginDatum = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 2,
                            Prijs = 1500.0,
                            StandaardPunten = 300
                        },
                        new
                        {
                            Id = 3,
                            BeginDatum = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2025, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 3,
                            Prijs = 1400.0,
                            StandaardPunten = 100
                        },
                        new
                        {
                            Id = 4,
                            BeginDatum = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 4,
                            Prijs = 1600.0,
                            StandaardPunten = 200
                        },
                        new
                        {
                            Id = 5,
                            BeginDatum = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2024, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 5,
                            Prijs = 1300.0,
                            StandaardPunten = 100
                        },
                        new
                        {
                            Id = 6,
                            BeginDatum = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 6,
                            Prijs = 1700.0,
                            StandaardPunten = 200
                        },
                        new
                        {
                            Id = 7,
                            BeginDatum = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 7,
                            Prijs = 1800.0,
                            StandaardPunten = 300
                        },
                        new
                        {
                            Id = 8,
                            BeginDatum = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 8,
                            Prijs = 1900.0,
                            StandaardPunten = 200
                        },
                        new
                        {
                            Id = 9,
                            BeginDatum = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 9,
                            Prijs = 1600.0,
                            StandaardPunten = 100
                        },
                        new
                        {
                            Id = 10,
                            BeginDatum = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EindDatum = new DateTime(2025, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroepsreisId = 10,
                            Prijs = 2000.0,
                            StandaardPunten = 50
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergieën")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Geboortedatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Medicatie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersoonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersoonId");

                    b.ToTable("Kind", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergieën = "Pinda's",
                            Geboortedatum = new DateTime(2012, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Jansen",
                            PersoonId = "1",
                            Voornaam = "Anna"
                        },
                        new
                        {
                            Id = 2,
                            Allergieën = "Geen",
                            Geboortedatum = new DateTime(2011, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Astma-inhaler",
                            Naam = "De Vries",
                            PersoonId = "2",
                            Voornaam = "Luca"
                        },
                        new
                        {
                            Id = 3,
                            Allergieën = "Koemelk",
                            Geboortedatum = new DateTime(2013, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Peters",
                            PersoonId = "3",
                            Voornaam = "Sophie"
                        },
                        new
                        {
                            Id = 4,
                            Allergieën = "Gluten",
                            Geboortedatum = new DateTime(2010, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Meijer",
                            PersoonId = "4",
                            Voornaam = "Noah"
                        },
                        new
                        {
                            Id = 5,
                            Allergieën = "Eieren",
                            Geboortedatum = new DateTime(2014, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Van Dijk",
                            PersoonId = "5",
                            Voornaam = "Emma"
                        },
                        new
                        {
                            Id = 6,
                            Allergieën = "Geen",
                            Geboortedatum = new DateTime(2011, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Kok",
                            PersoonId = "6",
                            Voornaam = "Liam"
                        },
                        new
                        {
                            Id = 7,
                            Allergieën = "Noten",
                            Geboortedatum = new DateTime(2013, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Smit",
                            PersoonId = "7",
                            Voornaam = "Mila"
                        },
                        new
                        {
                            Id = 8,
                            Allergieën = "Geen",
                            Geboortedatum = new DateTime(2012, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Antibiotica",
                            Naam = "Hendriks",
                            PersoonId = "8",
                            Voornaam = "Tijn"
                        },
                        new
                        {
                            Id = 9,
                            Allergieën = "Fruit",
                            Geboortedatum = new DateTime(2010, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Kramer",
                            PersoonId = "9",
                            Voornaam = "Sanne"
                        },
                        new
                        {
                            Id = 10,
                            Allergieën = "Geen",
                            Geboortedatum = new DateTime(2015, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medicatie = "Geen",
                            Naam = "Dekker",
                            PersoonId = "10",
                            Voornaam = "Julian"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BenodigdePunten")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Level", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BenodigdePunten = 0,
                            Naam = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            BenodigdePunten = 500,
                            Naam = "Brons"
                        },
                        new
                        {
                            Id = 3,
                            BenodigdePunten = 1000,
                            Naam = "Zilver"
                        },
                        new
                        {
                            Id = 4,
                            BenodigdePunten = 6000,
                            Naam = "Goud"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Monitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroepsreisDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("IsHoofdMonitor")
                        .HasColumnType("int");

                    b.Property<string>("PersoonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroepsreisDetailsId");

                    b.HasIndex("PersoonId");

                    b.ToTable("Monitor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroepsreisDetailsId = 1,
                            IsHoofdMonitor = 1,
                            PersoonId = "1"
                        },
                        new
                        {
                            Id = 2,
                            GroepsreisDetailsId = 2,
                            PersoonId = "2"
                        },
                        new
                        {
                            Id = 3,
                            GroepsreisDetailsId = 3,
                            IsHoofdMonitor = 1,
                            PersoonId = "3"
                        },
                        new
                        {
                            Id = 4,
                            GroepsreisDetailsId = 4,
                            PersoonId = "4"
                        },
                        new
                        {
                            Id = 5,
                            GroepsreisDetailsId = 5,
                            IsHoofdMonitor = 1,
                            PersoonId = "5"
                        },
                        new
                        {
                            Id = 6,
                            GroepsreisDetailsId = 6,
                            PersoonId = "6"
                        },
                        new
                        {
                            Id = 7,
                            GroepsreisDetailsId = 7,
                            IsHoofdMonitor = 1,
                            PersoonId = "7"
                        },
                        new
                        {
                            Id = 8,
                            GroepsreisDetailsId = 8,
                            PersoonId = "8"
                        },
                        new
                        {
                            Id = 9,
                            GroepsreisDetailsId = 9,
                            IsHoofdMonitor = 1,
                            PersoonId = "9"
                        },
                        new
                        {
                            Id = 10,
                            GroepsreisDetailsId = 10,
                            PersoonId = "10"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Onkosten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Bedrag")
                        .HasColumnType("float");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroepsreisId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroepsreisId");

                    b.ToTable("Onkosten", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bedrag = 200.0,
                            Datum = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "VervoerAmsterdam.jpg",
                            GroepsreisId = 1,
                            Omschrijving = "Kosten voor busvervoer naar Amsterdam.",
                            Titel = "Vervoer"
                        },
                        new
                        {
                            Id = 2,
                            Bedrag = 800.0,
                            Datum = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "HotelAmsterdam.jpg",
                            GroepsreisId = 2,
                            Omschrijving = "Hotelovernachtingen in Amsterdam.",
                            Titel = "Accommodatie"
                        },
                        new
                        {
                            Id = 3,
                            Bedrag = 300.0,
                            Datum = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "VliegticketsRome.jpg",
                            GroepsreisId = 3,
                            Omschrijving = "Vliegtickets naar Rome.",
                            Titel = "Vervoer"
                        },
                        new
                        {
                            Id = 4,
                            Bedrag = 50.0,
                            Datum = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "ColosseumExcursie.jpg",
                            GroepsreisId = 4,
                            Omschrijving = "Toegang tot het Colosseum.",
                            Titel = "Excursies"
                        },
                        new
                        {
                            Id = 5,
                            Bedrag = 150.0,
                            Datum = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "TreinreisParijs.jpg",
                            GroepsreisId = 5,
                            Omschrijving = "Treinreis naar Parijs.",
                            Titel = "Vervoer"
                        },
                        new
                        {
                            Id = 6,
                            Bedrag = 200.0,
                            Datum = new DateTime(2024, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "EtenParijs.jpg",
                            GroepsreisId = 6,
                            Omschrijving = "Maaltijden tijdens het verblijf.",
                            Titel = "Eten"
                        },
                        new
                        {
                            Id = 7,
                            Bedrag = 100.0,
                            Datum = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "BerlijnStadstour.jpg",
                            GroepsreisId = 7,
                            Omschrijving = "Stadstour door Berlijn.",
                            Titel = "Activiteiten"
                        },
                        new
                        {
                            Id = 8,
                            Bedrag = 50.0,
                            Datum = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "MetroLondon.jpg",
                            GroepsreisId = 8,
                            Omschrijving = "Metrokaartjes in Londen.",
                            Titel = "Vervoer"
                        },
                        new
                        {
                            Id = 9,
                            Bedrag = 40.0,
                            Datum = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "EmpireStateBuilding.jpg",
                            GroepsreisId = 9,
                            Omschrijving = "Toegang tot het Empire State Building.",
                            Titel = "Excursies"
                        },
                        new
                        {
                            Id = 10,
                            Bedrag = 250.0,
                            Datum = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "Shinkansen.jpg",
                            GroepsreisId = 10,
                            Omschrijving = "Shinkansen-tickets naar Tokio.",
                            Titel = "Vervoer"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalPlaatsen")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EindDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpleidingVereistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingVereistId");

                    b.ToTable("Opleiding", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AantalPlaatsen = 20,
                            BeginDatum = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Een introductiecursus voor beginnende reisleiders.",
                            EindDatum = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Basisopleiding Reisleider"
                        },
                        new
                        {
                            Id = 2,
                            AantalPlaatsen = 15,
                            BeginDatum = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Verdiepingscursus voor ervaren reisleiders.",
                            EindDatum = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Geavanceerde Reisleiding",
                            OpleidingVereistId = 1
                        },
                        new
                        {
                            Id = 3,
                            AantalPlaatsen = 30,
                            BeginDatum = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Cursus over de culturele en historische aspecten van verschillende bestemmingen.",
                            EindDatum = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Cultuur en Geschiedenis"
                        },
                        new
                        {
                            Id = 4,
                            AantalPlaatsen = 25,
                            BeginDatum = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Cursus gericht op taalvaardigheden voor communicatie met klanten.",
                            EindDatum = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Taalvaardigheid voor Reisleiders",
                            OpleidingVereistId = 2
                        },
                        new
                        {
                            Id = 5,
                            AantalPlaatsen = 20,
                            BeginDatum = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Cursus over duurzaamheid en ethische overwegingen in de reisindustrie.",
                            EindDatum = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Ethische Reispraktijken"
                        },
                        new
                        {
                            Id = 6,
                            AantalPlaatsen = 20,
                            BeginDatum = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Training over veiligheidsprocedures en hoe te handelen in noodgevallen.",
                            EindDatum = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Veiligheid en Noodprocedures",
                            OpleidingVereistId = 1
                        },
                        new
                        {
                            Id = 7,
                            AantalPlaatsen = 15,
                            BeginDatum = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Cursus die zich richt op het verbeteren van klantenservicevaardigheden.",
                            EindDatum = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Klantenservice in de Reisbranche"
                        },
                        new
                        {
                            Id = 8,
                            AantalPlaatsen = 15,
                            BeginDatum = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Training voor het effectief beheren van groepen tijdens reizen.",
                            EindDatum = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Technieken voor Groepsmanagement",
                            OpleidingVereistId = 2
                        },
                        new
                        {
                            Id = 9,
                            AantalPlaatsen = 25,
                            BeginDatum = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Cursus over het plannen en organiseren van reizen.",
                            EindDatum = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Reisplanning en Logistiek"
                        },
                        new
                        {
                            Id = 10,
                            AantalPlaatsen = 20,
                            BeginDatum = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Beschrijving = "Training over marketingstrategieën specifiek voor de reisbranche.",
                            EindDatum = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Marketing voor Reisleiders"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.OpleidingPersoon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OpleidingsId")
                        .HasColumnType("int");

                    b.Property<string>("PersoonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingsId");

                    b.HasIndex("PersoonId");

                    b.ToTable("OpleidingPersoon", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OpleidingsId = 1,
                            PersoonId = "1"
                        },
                        new
                        {
                            Id = 2,
                            OpleidingsId = 2,
                            PersoonId = "2"
                        },
                        new
                        {
                            Id = 3,
                            OpleidingsId = 3,
                            PersoonId = "3"
                        },
                        new
                        {
                            Id = 4,
                            OpleidingsId = 4,
                            PersoonId = "4"
                        },
                        new
                        {
                            Id = 5,
                            OpleidingsId = 5,
                            PersoonId = "5"
                        },
                        new
                        {
                            Id = 6,
                            OpleidingsId = 6,
                            PersoonId = "6"
                        },
                        new
                        {
                            Id = 7,
                            OpleidingsId = 7,
                            PersoonId = "7"
                        },
                        new
                        {
                            Id = 8,
                            OpleidingsId = 8,
                            PersoonId = "8"
                        },
                        new
                        {
                            Id = 9,
                            OpleidingsId = 9,
                            PersoonId = "9"
                        },
                        new
                        {
                            Id = 10,
                            OpleidingsId = 10,
                            PersoonId = "10"
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Programma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiviteitId")
                        .HasColumnType("int");

                    b.Property<int>("GroepsreisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteitId");

                    b.HasIndex("GroepsreisId");

                    b.ToTable("Programma", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiviteitId = 1,
                            GroepsreisId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActiviteitId = 2,
                            GroepsreisId = 2
                        },
                        new
                        {
                            Id = 3,
                            ActiviteitId = 3,
                            GroepsreisId = 3
                        },
                        new
                        {
                            Id = 4,
                            ActiviteitId = 4,
                            GroepsreisId = 4
                        },
                        new
                        {
                            Id = 5,
                            ActiviteitId = 5,
                            GroepsreisId = 5
                        },
                        new
                        {
                            Id = 6,
                            ActiviteitId = 6,
                            GroepsreisId = 6
                        },
                        new
                        {
                            Id = 7,
                            ActiviteitId = 7,
                            GroepsreisId = 7
                        },
                        new
                        {
                            Id = 8,
                            ActiviteitId = 8,
                            GroepsreisId = 8
                        },
                        new
                        {
                            Id = 9,
                            ActiviteitId = 9,
                            GroepsreisId = 9
                        },
                        new
                        {
                            Id = 10,
                            ActiviteitId = 10,
                            GroepsreisId = 10
                        });
                });

            modelBuilder.Entity("Project_ZF.Models.Punten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AantalPunten")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeelnemerId")
                        .HasColumnType("int");

                    b.Property<int>("GroepsreisId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeelnemerId");

                    b.HasIndex("GroepsreisId");

                    b.ToTable("Punten", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AantalPunten = 200,
                            Datum = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeelnemerId = 1,
                            GroepsreisId = 1,
                            Omschrijving = "deelname reis"
                        },
                        new
                        {
                            Id = 2,
                            AantalPunten = 100,
                            Datum = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeelnemerId = 2,
                            GroepsreisId = 2,
                            Omschrijving = "deelname reis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project_ZF.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project_ZF.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_ZF.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project_ZF.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_ZF.Models.Beloning", b =>
                {
                    b.HasOne("Project_ZF.Models.Level", "Level")
                        .WithMany("Beloningen")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Project_ZF.Models.CustomUser", b =>
                {
                    b.HasOne("Project_ZF.Models.Level", "Level")
                        .WithMany("Gebruikers")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Project_ZF.Models.Deelnemer", b =>
                {
                    b.HasOne("Project_ZF.Models.Groepsreis", "Groepsreis")
                        .WithMany("Deelnemers")
                        .HasForeignKey("GroepreisDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_ZF.Models.Kind", "Kind")
                        .WithMany("Deelnemers")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groepsreis");

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("Project_ZF.Models.Foto", b =>
                {
                    b.HasOne("Project_ZF.Models.Bestemming", "Bestemming")
                        .WithMany("Fotos")
                        .HasForeignKey("BestemmingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bestemming");
                });

            modelBuilder.Entity("Project_ZF.Models.Groepsreis", b =>
                {
                    b.HasOne("Project_ZF.Models.Bestemming", "Bestemming")
                        .WithMany("Groepsreizen")
                        .HasForeignKey("GroepsreisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bestemming");
                });

            modelBuilder.Entity("Project_ZF.Models.Kind", b =>
                {
                    b.HasOne("Project_ZF.Models.CustomUser", "CustomUser")
                        .WithMany("Kinderen")
                        .HasForeignKey("PersoonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomUser");
                });

            modelBuilder.Entity("Project_ZF.Models.Monitor", b =>
                {
                    b.HasOne("Project_ZF.Models.Groepsreis", "Groepsreis")
                        .WithMany("Monitoren")
                        .HasForeignKey("GroepsreisDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project_ZF.Models.CustomUser", "CustomUser")
                        .WithMany("Monitoren")
                        .HasForeignKey("PersoonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomUser");

                    b.Navigation("Groepsreis");
                });

            modelBuilder.Entity("Project_ZF.Models.Onkosten", b =>
                {
                    b.HasOne("Project_ZF.Models.Groepsreis", "Groepsreis")
                        .WithMany("Onkosten")
                        .HasForeignKey("GroepsreisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Groepsreis");
                });

            modelBuilder.Entity("Project_ZF.Models.Opleiding", b =>
                {
                    b.HasOne("Project_ZF.Models.Opleiding", "OpleidingVereist")
                        .WithMany("VereisteOpleidingen")
                        .HasForeignKey("OpleidingVereistId");

                    b.Navigation("OpleidingVereist");
                });

            modelBuilder.Entity("Project_ZF.Models.OpleidingPersoon", b =>
                {
                    b.HasOne("Project_ZF.Models.Opleiding", "Opleiding")
                        .WithMany("OpleidingPersonen")
                        .HasForeignKey("OpleidingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project_ZF.Models.CustomUser", "CustomUser")
                        .WithMany("opleidingPersonen")
                        .HasForeignKey("PersoonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomUser");

                    b.Navigation("Opleiding");
                });

            modelBuilder.Entity("Project_ZF.Models.Programma", b =>
                {
                    b.HasOne("Project_ZF.Models.Activiteit", "Activiteit")
                        .WithMany("Programmas")
                        .HasForeignKey("ActiviteitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_ZF.Models.Groepsreis", "Groepsreis")
                        .WithMany("Programmas")
                        .HasForeignKey("GroepsreisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activiteit");

                    b.Navigation("Groepsreis");
                });

            modelBuilder.Entity("Project_ZF.Models.Punten", b =>
                {
                    b.HasOne("Project_ZF.Models.Deelnemer", "Deelnemer")
                        .WithMany("Punten")
                        .HasForeignKey("DeelnemerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project_ZF.Models.Groepsreis", "Groepsreis")
                        .WithMany("Punten")
                        .HasForeignKey("GroepsreisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deelnemer");

                    b.Navigation("Groepsreis");
                });

            modelBuilder.Entity("Project_ZF.Models.Activiteit", b =>
                {
                    b.Navigation("Programmas");
                });

            modelBuilder.Entity("Project_ZF.Models.Bestemming", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("Groepsreizen");
                });

            modelBuilder.Entity("Project_ZF.Models.CustomUser", b =>
                {
                    b.Navigation("Kinderen");

                    b.Navigation("Monitoren");

                    b.Navigation("opleidingPersonen");
                });

            modelBuilder.Entity("Project_ZF.Models.Deelnemer", b =>
                {
                    b.Navigation("Punten");
                });

            modelBuilder.Entity("Project_ZF.Models.Groepsreis", b =>
                {
                    b.Navigation("Deelnemers");

                    b.Navigation("Monitoren");

                    b.Navigation("Onkosten");

                    b.Navigation("Programmas");

                    b.Navigation("Punten");
                });

            modelBuilder.Entity("Project_ZF.Models.Kind", b =>
                {
                    b.Navigation("Deelnemers");
                });

            modelBuilder.Entity("Project_ZF.Models.Level", b =>
                {
                    b.Navigation("Beloningen");

                    b.Navigation("Gebruikers");
                });

            modelBuilder.Entity("Project_ZF.Models.Opleiding", b =>
                {
                    b.Navigation("OpleidingPersonen");

                    b.Navigation("VereisteOpleidingen");
                });
#pragma warning restore 612, 618
        }
    }
}
